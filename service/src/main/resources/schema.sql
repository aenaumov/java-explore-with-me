
CREATE TABLE IF NOT EXISTS USERS
(
    USER_ID   BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    USER_NAME VARCHAR(50),
    EMAIL     VARCHAR(50) NOT NULL,
    CONSTRAINT USER_PK PRIMARY KEY (USER_ID),
    CONSTRAINT UQ_USER_EMAIL UNIQUE (EMAIL)
    );

CREATE TABLE IF NOT EXISTS CATEGORIES
(
    CATEGORY_ID BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    CATEGORY_NAME VARCHAR(50),
    CONSTRAINT CATEGORY_PK PRIMARY KEY (CATEGORY_ID),
    CONSTRAINT UQ_CATEGORY_NAME UNIQUE (CATEGORY_NAME)
);

CREATE TABLE IF NOT EXISTS LOCATIONS
(
    LOCATION_ID BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    LAT REAL,
    LON REAL,
    CONSTRAINT LOCATION_PK PRIMARY KEY (LOCATION_ID)
);

CREATE TABLE IF NOT EXISTS EVENTS
(
    EVENT_ID BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    ANNOTATION VARCHAR(2000),
    CATEGORY_ID BIGINT NOT NULL,
    CONFIRMED_REQUESTS BIGINT NOT NULL,
    CREATED_ON TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    EVENT_DESCRIPTION VARCHAR(7000),
    EVENT_DATE TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    USER_ID BIGINT NOT NULL,
    LOCATION_ID BIGINT NOT NULL,
    PAID BOOLEAN,
    PARTICIPANT_LIMIT BIGINT NOT NULL,
    PUBLISHED_ON TIMESTAMP WITHOUT TIME ZONE,
    REQUEST_MODERATION BOOLEAN,
    EVENT_STATE VARCHAR(30),
    TITLE VARCHAR(120),
    VIEWS BIGINT NOT NULL,
    CONSTRAINT EVENT_PK PRIMARY KEY (EVENT_ID),
    CONSTRAINT EVENT_CATEGORY_ID_FK FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES (CATEGORY_ID),
    CONSTRAINT EVENT_USER_ID_FK FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID),
    CONSTRAINT EVENT_LOCATION_ID_FK FOREIGN KEY (LOCATION_ID) REFERENCES LOCATIONS (LOCATION_ID)
);

CREATE TABLE IF NOT EXISTS COMPILATIONS
(
    COMPILATION_ID BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    PINNED BOOLEAN,
    TITLE VARCHAR(255),
    CONSTRAINT COMPILATIONS_PK PRIMARY KEY (COMPILATION_ID)
);

CREATE TABLE IF NOT EXISTS COMPILATIONS_EVENTS
(
    COMPILATION_COMPILATION_ID BIGINT NOT NULL,
    EVENTS_EVENT_ID BIGINT NOT NULL,
    CONSTRAINT COMPILATIONS_EVENTS_PK PRIMARY KEY (COMPILATION_COMPILATION_ID, EVENTS_EVENT_ID),
    CONSTRAINT COMPILATIONS_EVENTS_COMPILATION_ID_FK FOREIGN KEY (COMPILATION_COMPILATION_ID)
    REFERENCES COMPILATIONS (COMPILATION_ID),
    CONSTRAINT COMPILATIONS_EVENTS_EVENT_ID_FK FOREIGN KEY (EVENTS_EVENT_ID) REFERENCES EVENTS (EVENT_ID)
);

CREATE TABLE IF NOT EXISTS REQUESTS
(
    REQUEST_ID BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    CREATED    TIMESTAMP WITHOUT TIME ZONE,
    EVENT_ID   BIGINT NOT NULL,
    USER_ID    BIGINT NOT NULL,
    STATUS     VARCHAR(30),
    CONSTRAINT REQUESTS_PK PRIMARY KEY (REQUEST_ID),
    CONSTRAINT REQUESTS_EVENT_ID_FK FOREIGN KEY (EVENT_ID) REFERENCES EVENTS (EVENT_ID),
    CONSTRAINT REQUESTS_USER_ID_FK FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID),
    CONSTRAINT UQ_EVENT_ID_USER_ID UNIQUE (EVENT_ID, USER_ID)
);

CREATE TABLE IF NOT EXISTS LOCATION_TYPES
(
    LOCATION_TYPE_ID BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    LOCATION_TYPE_NAME VARCHAR(50),
    CONSTRAINT LOCATION_TYPES_PK PRIMARY KEY (LOCATION_TYPE_ID),
    CONSTRAINT UQ_LOCATION_TYPE_NAME UNIQUE (LOCATION_TYPE_NAME)
);

CREATE TABLE IF NOT EXISTS PLACES
(
    PLACE_ID BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    LOCATION_TYPE_ID BIGINT NOT NULL,
--     LOCATION_ID BIGINT NOT NULL,
    PLACE_NAME VARCHAR(200),

    PLACE_LAT REAL,
    PLACE_LON REAL,
    PLACE_RAD REAL,

    CONSTRAINT PLACES_PK PRIMARY KEY (PLACE_ID),
    CONSTRAINT PLACES_LOCATION_TYPE_ID FOREIGN KEY (LOCATION_TYPE_ID) REFERENCES LOCATION_TYPES (LOCATION_TYPE_ID),
--     CONSTRAINT PLACES_LOCATION_ID FOREIGN KEY (LOCATION_ID) REFERENCES LOCATIONS (LOCATION_ID),
    CONSTRAINT UQ_LOCATION_TYPE_ID_PLACE_NAME_LAT_LON UNIQUE (LOCATION_TYPE_ID, PLACE_NAME, PLACE_LAT, PLACE_LON)
);

CREATE OR REPLACE FUNCTION distance(lat1 float, lon1 float, lat2 float, lon2 float)
    RETURNS float
AS
'
    declare
        dist float = 0;
        rad_lat1 float;
        rad_lat2 float;
        theta float;
        rad_theta float;
    BEGIN
        IF lat1 = lat2 AND lon1 = lon2
        THEN
            RETURN dist;
        ELSE
            -- переводим градусы широты в радианы
            rad_lat1 = pi() * lat1 / 180;
            -- переводим градусы долготы в радианы
            rad_lat2 = pi() * lat2 / 180;
            -- находим разность долгот
            theta = lon1 - lon2;
            -- переводим градусы в радианы
            rad_theta = pi() * theta / 180;
            -- находим длину ортодромии
            dist = sin(rad_lat1) * sin(rad_lat2) + cos(rad_lat1) * cos(rad_lat2) * cos(rad_theta);

            IF dist > 1
            THEN dist = 1;
            END IF;

            dist = acos(dist);
            -- переводим радианы в градусы
            dist = dist * 180 / pi();
            -- переводим градусы в километры
            dist = dist * 60 * 1.8524;

            RETURN dist;
        END IF;
    END;
'
    LANGUAGE PLPGSQL;